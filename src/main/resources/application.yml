spring:
  application:
    name: ${SERVICE_NAME:em-gateway}

  docker:
    compose:
      enabled: ${DOCKER_COMPOSE_ENABLED:false}

  cloud:
    gateway:
      discovery:
        locator:
          enabled: ${DISCOVERY_LOCATOR_ENABLED:true}                                          # Включаем автоматическое обнаружение сервисов через Eureka
          lower-case-service-id: ${DISCOVERY_LOCATOR_LOWERCASE:true}                          # Использовать нижний регистр для имен сервисов

      # Настройки HTTP клиента
      httpclient:
        connect-timeout: ${GATEWAY_CONNECT_TIMEOUT:2000}                                      # Таймаут на установление соединения (мс)
        response-timeout: ${GATEWAY_RESPONSE_TIMEOUT:5s}                                      # Таймаут ожидания ответа

      # Включение метрик
      metrics:
        enabled: ${GATEWAY_METRICS_ENABLED:true}

      # Конфигурация маршрутов
      routes:
        # Маршрут для Collector сервиса
        - id: ${COLLECTOR_SERVICE_ID:collector-service}
          uri: lb://${COLLECTOR_SERVICE_NAME:em-collector}                                    # lb:// означает использование балансировщика нагрузки
          predicates:
            - Path=${COLLECTOR_PATH:/collector/**}                                            # Паттерн URL для маршрутизации
          filters:
            - StripPrefix=${COLLECTOR_STRIP_PREFIX:1}                                         # Удаляет первый сегмент пути (/collector)
            - AddResponseHeader=X-Response-Service, ${COLLECTOR_RESPONSE_HEADER:collector}

        # Маршрут для Processor сервиса
        - id: ${PROCESSOR_SERVICE_ID:processor-service}
          uri: lb://${PROCESSOR_SERVICE_NAME:em-processor}
          predicates:
            - Path=${PROCESSOR_PATH:/processor/**}
          filters:
            - StripPrefix=${PROCESSOR_STRIP_PREFIX:1}
            - AddResponseHeader=X-Response-Service, ${PROCESSOR_RESPONSE_HEADER:processor}

        # Маршрут для API сервиса
        - id: ${API_SERVICE_ID:api-service}
          uri: lb://${API_SERVICE_NAME:em-api}
          predicates:
            - Path=${API_PATH:/api/**}
          filters:
            - StripPrefix=${API_STRIP_PREFIX:1}
            - AddResponseHeader=X-Response-Service, ${API_RESPONSE_HEADER:api}

        # Маршрут для Adapter сервиса
        - id: ${ADAPTER_SERVICE_ID:adapter-service}
          uri: lb://${ADAPTER_SERVICE_NAME:em-adapter}
          predicates:
            - Path=${ADAPTER_PATH:/adapter/**}
          filters:
            - StripPrefix=${ADAPTER_STRIP_PREFIX:1}
            - AddResponseHeader=X-Response-Service, ${ADAPTER_RESPONSE_HEADER:adapter}

# Настройки сервера
server:
  port: ${SERVER_PORT:8080}

# Настройки актуатора для мониторинга
management:
  server:
    port: ${ACTUATOR_PORT:8081}
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info,metrics,prometheus}
  endpoint:
    health:
      show-details: ${HEALTH_DETAILS_VISIBLE:always}

# Настройки Eureka клиента
eureka:
  client:
    register-with-eureka: ${EUREKA_REGISTER_ENABLED:true}                                       # Регистрация в Eureka
    fetch-registry: ${EUREKA_FETCH_ENABLED:true}                                                # Получение списка сервисов
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE:http://em-discovery:8761/eureka/}
  instance:
    prefer-ip-address: ${EUREKA_PREFER_IP:false}                                                # Использовать IP вместо hostname
    instance-id: ${EUREKA_INSTANCE_HOSTNAME:localhost}:${server.port}:${random.uuid}
    lease-renewal-interval-in-seconds: ${EUREKA_HEARTBEAT_INTERVAL:30}                          # Интервал отправки heartbeat
    lease-expiration-duration-in-seconds: ${EUREKA_LEASE_EXPIRATION:90}                         # Время до признания сервиса недоступным
    health-check-url-path: ${EUREKA_HEALTH_CHECK_PATH:/actuator/health}
    status-page-url-path: ${EUREKA_STATUS_PAGE_PATH:/actuator/info}